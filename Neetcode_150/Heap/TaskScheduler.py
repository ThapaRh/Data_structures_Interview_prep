"""
Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.

However, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks.

Return the least number of units of times that the CPU will take to finish all the given tasks.

 

Example 1:

Input: tasks = ["A","A","A","B","B","B"], n = 2
Output: 8
Explanation: 
A -> B -> idle -> A -> B -> idle -> A -> B
There is at least 2 units of time between any two same tasks.
"""
#Tc=O(nlogn) SC=O(N)

class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        # counter = {}
        # for t in tasks:
        #     if t in counter:
        #         counter[t]+=1
        #     else:
        #         counter[t]=1
        # maxHeap=[]
        # for key in counter:
        #     maxHeap.append([-counter[key],key])
        # heapq.heapify(maxHeap)
        # q=collections.deque()
        # time=0
        # PossibleSolution=""
        # while maxHeap or q:
        #     time+=1
        #     if q:
        #         if q[0][0]==time+1:
        #             popped = q.popleft()
        #             heapq.heappush(maxHeap,[popped[1],popped[2]])
        #     if maxHeap:
        #         cnt=heapq.heappop(maxHeap) 
        #         cnt[0]+=1
        #         #because one occurance is lessen everytime we use that,
        #         # we represent that by adding 1 since this is python and maxHeap 
        #         #is generated by negation minheap
        #         reappearingTime= time+n
        #         if cnt[0]<0:
        #             q.append([reappearingTime,cnt[0],cnt[1]])
        #         PossibleSolution+=cnt[1]
                
        #     else:
        #         PossibleSolution+="_"
        # print(PossibleSolution)
        # return time
        count=collections.Counter(tasks)
        maxHeap=[-cnt for cnt in count.values()]
        heapq.heapify(maxHeap)
        q=collections.deque()
        time=0
        while maxHeap or q:
            time+=1
            if maxHeap:
                cnt=heapq.heappop(maxHeap)+1
                if cnt:
                    q.append([cnt,time+n])
            if q and q[0][1]==time:
                    heapq.heappush(maxHeap,q.popleft()[0]) 
        return time

